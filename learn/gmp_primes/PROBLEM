Lets Implement the miller rabin primality test for arbitrarily
large numbers!

Statement: Given input n > 3, output PRIME or COMPOSITE.
More specifically exactly implement the following psuedo code


Input: n > 3, an odd integer to be tested for primality;
Input: k, a parameter that determines the accuracy of the test
Output: composite if n is composite, otherwise probably prime
write n − 1 as 2s·d with d odd by factoring powers of 2 from n − 1
WitnessLoop: repeat k times:
   pick a random integer a in the range [2, n − 2]
   x ← ad mod n
   if x = 1 or x = n − 1 then do next WitnessLoop
   repeat s − 1 times:
      x ← x2 mod n
      if x = 1 then return composite
      if x = n − 1 then do next WitnessLoop
   return composite
return probably prime

Notes:
1) Abstract out the random number generation. In particular, make sure that,

a) by setting a single seed the whole random number generation can be made
deterministic.
b) the whole random number generator can be replaced as a module.
c) Preferably use the builtin gmp random number generation and seeding functions.